// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimplyBooksAPI.Data;

#nullable disable

namespace SimplyBooksAPI.Migrations
{
    [DbContext(typeof(SimplyBooksAPIDbContext))]
    [Migration("20241006231519_UpdatedDbContext")]
    partial class UpdatedDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimplyBooksAPI.Models.AuthorBooks", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ta@ta.com",
                            Favorite = true,
                            FirstName = "Tomi",
                            LastName = "Adeyemi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "ba@obama.com",
                            Favorite = true,
                            FirstName = "Barack",
                            LastName = "Obama",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "hz@zinn.com",
                            Favorite = false,
                            FirstName = "Howard",
                            LastName = "Zinn",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "at@thomas.com",
                            Favorite = false,
                            FirstName = "Angie",
                            LastName = "Thomas",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Email = "cw@whithead.com",
                            Favorite = false,
                            FirstName = "Colson",
                            LastName = "Whitehead",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "mk@kendall.com",
                            Favorite = true,
                            FirstName = "Mikki",
                            LastName = "Kendall",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "lm@lm.com",
                            Favorite = true,
                            FirstName = "L.L",
                            LastName = "McKinney",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Email = "jb@baldwin.com",
                            Favorite = false,
                            FirstName = "James",
                            LastName = "Baldwin",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Books", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Sale")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef99feb2-485f-4a6c-bd12-b5598ea640aa"),
                            AuthorId = 2,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/91+NBrXG-PL.jpg",
                            Price = "24.99",
                            Sale = false,
                            Title = "A Promised Land",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("095fee65-941e-4a7f-b1a7-ce95e5998448"),
                            AuthorId = 1,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/A1agLFsWkOL.jpg",
                            Price = "12.99",
                            Sale = true,
                            Title = "Children of Blood and Bone",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("baafd719-670f-447d-80e4-1d9714073ebd"),
                            AuthorId = 3,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/51529Lfc2ML.jpg",
                            Price = "30.00",
                            Sale = false,
                            Title = "A People's History of the United States of America",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("c57bc1e8-cc64-4784-8a9b-fa2b7277fa5f"),
                            AuthorId = 4,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/81rRRmZZvZL.jpg",
                            Price = "15.89",
                            Sale = false,
                            Title = "Concrete Rose",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("1484266d-8621-409b-a0e4-1405e90aa7bc"),
                            AuthorId = 5,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/A1Cu4ywUeyL.jpg",
                            Price = "25.00",
                            Sale = true,
                            Title = "The Underground Railroad",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("026fb7d0-2909-42df-bf94-214dca8ec7d9"),
                            AuthorId = 6,
                            Description = "",
                            Image = "https://res.cloudinary.com/bloomsbury-atlas/image/upload/w_360,c_scale/jackets/9781526622402.jpg",
                            Price = "12.99",
                            Sale = true,
                            Title = "Hood Feminism",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("45d6b609-9cb6-42e1-bb9d-1a1c23aa124b"),
                            AuthorId = 7,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/81Uf1dTjfQL.jpg",
                            Price = "15.00",
                            Sale = false,
                            Title = "A Blade So Black",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("c05f210d-f870-4c89-84cf-17cd117689a9"),
                            AuthorId = 7,
                            Description = "",
                            Image = "https://m.media-amazon.com/images/I/51BZdlchEsL.jpg",
                            Price = "14.99",
                            Sale = false,
                            Title = "A Dream So Dark",
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("41b1b757-1132-47e5-aa45-52d9dece8332"),
                            AuthorId = 8,
                            Description = "",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/61GSqXVhhKL.jpg",
                            Price = "12.00",
                            Sale = false,
                            Title = "The Fire Next Time",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "britnaygore268@gmail.com",
                            Name = "Britnay Gore",
                            Uid = "NdnbyDbtZTUYr9T0YH4YicxApXG2"
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.AuthorBooks", b =>
                {
                    b.HasOne("SimplyBooksAPI.Models.Authors", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyBooksAPI.Models.Books", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Authors", b =>
                {
                    b.HasOne("SimplyBooksAPI.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Books", b =>
                {
                    b.HasOne("SimplyBooksAPI.Models.Authors", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyBooksAPI.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Authors", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Books", b =>
                {
                    b.Navigation("AuthorBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
